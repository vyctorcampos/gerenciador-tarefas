package com.desafio.tarefa.controllers;

import java.util.List;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.desafio.tarefa.dto.request.TarefaRequestDTO;
import com.desafio.tarefa.dto.response.TarefaResponseDTO;
import com.desafio.tarefa.service.TarefaService;
import com.exemplo.gerenciador.tarefas.dto.TarefaResponseDto;

@RestController
@RequestMapping("/api/tarefas")
public class TarefaController {

    private final TarefaService tarefaService;

    public TarefaController(TarefaService tarefaService) {
        this.tarefaService = tarefaService;
    }

    /**
     * Endpoint para criar uma nova tarefa.
     * @param tarefaRequestDto O DTO com os dados da tarefa a ser criada.
     * @return ResponseEntity com o DTO da tarefa criada e o status 201 Created.
     */
    @PostMapping
    public ResponseEntity<TarefaResponseDTO> criarTarefa(@RequestBody TarefaRequestDTO tarefaRequestDto) {
    	TarefaResponseDTO novaTarefa = tarefaService.criarTarefa(tarefaRequestDto);
        return new ResponseEntity<>(novaTarefa, HttpStatus.CREATED);
    }

    /**
     * Endpoint para listar todas as tarefas.
     * @return ResponseEntity com a lista de DTOs de tarefas e o status 200 OK.
     */
    @GetMapping
    public ResponseEntity<List<TarefaResponseDTO>> listarTodasTarefas() {
        List<TarefaResponseDTO> tarefas = tarefaService.listarTodos();
        return ResponseEntity.ok(tarefas);
    }

    /**
     * Endpoint para atualizar uma tarefa existente.
     * @param id O ID da tarefa a ser atualizada.
     * @param tarefaRequestDto O DTO com os dados atualizados da tarefa.
     * @return ResponseEntity com o DTO da tarefa atualizada e o status 200 OK.
     */
    @PutMapping("/{id}")
    public ResponseEntity<TarefaResponseDto> atualizarTarefa(@PathVariable Long id, @RequestBody TarefaRequestDTO tarefaRequestDto) {
    	TarefaResponseDTO tarefaAtualizada = tarefaService.atualizarTarefa(id, tarefaRequestDto);
        return ResponseEntity.ok(tarefaAtualizada);
    }

    /**
     * Endpoint para remover uma tarefa.
     * @param id O ID da tarefa a ser removida.
     * @return ResponseEntity com o status 204 No Content.
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> removerTarefa(@PathVariable UUID id) {
        tarefaService.removerTarefa(id);
        return ResponseEntity.noContent().build();
    }
}

