package com.desafio.tarefa.controllers;

import com.desafio.tarefa.dto.request.AuthRequestDTO;
import com.desafio.tarefa.dto.request.RegisterRequestDTO;
import com.desafio.tarefa.dto.response.LoginResponseDTO;
import com.desafio.tarefa.dto.response.RegisterRespondeDTO;
import com.desafio.tarefa.model.UserRole;
import com.desafio.tarefa.model.Users;
import com.desafio.tarefa.repository.UserRepository;
import com.desafio.tarefa.config.security.TokenService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(AuthController.class)
class AuthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthenticationManager authenticationManager;

    @MockBean
    private UserRepository userRepository;

    @MockBean
    private TokenService tokenService;

    @Autowired
    private ObjectMapper objectMapper;

    private AuthRequestDTO authRequest;
    private RegisterRequestDTO registerRequest;
    private Users mockUser;
    private Authentication mockAuthentication;

    @BeforeEach
    void setUp() {
        authRequest = new AuthRequestDTO("teste@teste.com", "123456");
        registerRequest = new RegisterRequestDTO("novo@usuario.com", "123456", UserRole.WRITE);
        
        mockUser = new Users("teste@teste.com", "encryptedPassword", UserRole.WRITE);
        mockAuthentication = new UsernamePasswordAuthenticationToken(mockUser, null);
    }

    @Test
    void testLoginSuccess() throws Exception {
        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class)))
                .thenReturn(mockAuthentication);
        when(tokenService.generateToken(any(Users.class))).thenReturn("jwt-token-123");

        mockMvc.perform(post("/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(authRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("teste@teste.com"))
                .andExpect(jsonPath("$.token").value("jwt-token-123"));
    }

    @Test
    void testLoginWithInvalidData() throws Exception {
        AuthRequestDTO invalidRequest = new AuthRequestDTO("", "");

        mockMvc.perform(post("/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void testRegisterSuccess() throws Exception {
        when(userRepository.findByLogin("novo@usuario.com")).thenReturn(null);
        when(tokenService.generateToken(any(Users.class))).thenReturn("jwt-token-456");

        mockMvc.perform(post("/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(registerRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.login").value("novo@usuario.com"))
                .andExpect(jsonPath("$.token").value("jwt-token-456"));
    }

    @Test
    void testRegisterWithExistingUser() throws Exception {
        when(userRepository.findByLogin("novo@usuario.com")).thenReturn(mockUser);

        mockMvc.perform(post("/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(registerRequest)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void testRegisterWithInvalidData() throws Exception {
        RegisterRequestDTO invalidRequest = new RegisterRequestDTO("", "", UserRole.READ);

        mockMvc.perform(post("/auth/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest());
    }
}
