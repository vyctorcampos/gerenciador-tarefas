CREATE SCHEMA IF NOT EXISTS tarefa;

SET search_path TO tarefa, public;

CREATE TABLE IF NOT EXISTS tarefa.users (
    id SERIAL PRIMARY KEY,
    login VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'READ',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS tarefa.tarefa (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    titulo VARCHAR(255) NOT NULL,
    descricao TEXT,
    responsavel VARCHAR(255) NOT NULL,
    prioridade VARCHAR(50) NOT NULL CHECK (prioridade IN ('Alta', 'Media', 'Baixa')),
    deadline DATE NOT NULL,
    situacao VARCHAR(50) NOT NULL DEFAULT 'Em andamento' CHECK (situacao IN ('Em andamento', 'Concluida')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_tarefa_responsavel ON tarefa.tarefa(responsavel);
CREATE INDEX IF NOT EXISTS idx_tarefa_prioridade ON tarefa.tarefa(prioridade);
CREATE INDEX IF NOT EXISTS idx_tarefa_situacao ON tarefa.tarefa(situacao);
CREATE INDEX IF NOT EXISTS idx_tarefa_deadline ON tarefa.tarefa(deadline);

CREATE OR REPLACE FUNCTION tarefa.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_tarefa_updated_at 
    BEFORE UPDATE ON tarefa.tarefa 
    FOR EACH ROW EXECUTE FUNCTION tarefa.update_updated_at_column();

CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON tarefa.users 
    FOR EACH ROW EXECUTE FUNCTION tarefa.update_updated_at_column();

INSERT INTO tarefa.users (login, password, role) 
VALUES ('admin', '$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDa', 'WRITE')
ON CONFLICT (login) DO NOTHING;
