 package com.desafio.tarefa.service.impl;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.desafio.tarefa.dto.request.TarefaRequestDTO;
import com.desafio.tarefa.dto.response.TarefaResponseDTO;
import com.desafio.tarefa.mapper.TarefaMapper;
import com.desafio.tarefa.model.Tarefa;
import com.desafio.tarefa.repository.TarefaRepository;
import com.desafio.tarefa.repository.UserRepository;
import com.desafio.tarefa.service.TarefaService;
import com.desafio.tarefa.validates.TarefaValidates;

@Service
@Transactional
public class TarefaServiceImpl implements TarefaService {

	@Autowired
	TarefaRepository tarefaRepository;
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	TarefaMapper tarefaMapper;
	
	@Autowired
	TarefaValidates tarefaValidates;  

    @Override
    public TarefaResponseDTO criarTarefa(TarefaRequestDTO tarefaRequestDto) {

        Tarefa tarefa = tarefaMapper.toEntity(tarefaRequestDto);

        tarefa.setId(UUID.randomUUID());
                        
        Tarefa tarefaSalva = tarefaRepository.save(tarefa);

        return tarefaMapper.toResponseDto(tarefaSalva);
    }

    @Override
    public TarefaResponseDTO atualizarTarefa(UUID id, TarefaRequestDTO tarefaRequestDTO) {
        // Valida se a tarefa com o ID fornecido existe
        Tarefa tarefaExistente = tarefaValidates.validarTarefaExistePorId(id);

        // Atualiza os dados da tarefa existente com base no DTO de requisição
        tarefaExistente.setTitulo(tarefaRequestDTO.getTitulo());
        tarefaExistente.setDescricao(tarefaRequestDTO.getDescricao());
        tarefaExistente.setResponsavel(tarefaRequestDTO.getResponsavel());
        tarefaExistente.setPrioridade(tarefaRequestDTO.getPrioridade());
        tarefaExistente.setDeadline(tarefaRequestDTO.getDeadline());
        tarefaExistente.setSituacao(tarefaRequestDTO.getSituacao());
        // O userId não é atualizado, pois a tarefa pertence a um usuário específico

        // Salva as alterações
        Tarefa tarefaAtualizada = tarefaRepository.save(tarefaExistente);

        // Retorna o DTO de resposta da tarefa atualizada
        return tarefaMapper.toResponseDto(tarefaAtualizada);
    }

    @Override
    public void removerTarefa(UUID id) {
        // Valida se a tarefa com o ID fornecido existe
        Tarefa tarefaExistente = tarefaValidates.validarTarefaExistePorId(id);

        // Remove a tarefa
        tarefaRepository.deleteById(tarefaExistente.getId());
    }
	
    @Override
    @Transactional(readOnly = true)
    public List<TarefaResponseDTO> listarTodos() {
        // Busca todas as tarefas
        List<Tarefa> tarefas = tarefaRepository.findAll();

        // Mapeia a lista de entidades para uma lista de DTOs de resposta
        return tarefas.stream()
                .map(tarefaMapper::toResponseDto)
                .toList();
    }
}