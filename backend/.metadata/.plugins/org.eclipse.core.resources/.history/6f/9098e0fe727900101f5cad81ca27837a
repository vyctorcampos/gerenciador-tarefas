package com.desafio.tarefa.model;

import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "users") 
public class Users implements UserDetails {

	
	@Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

	private String login;
    private String password;
    private UserRole role;

    public Users(String login, String password, UserRole role){
        this.login = login;
        this.password = password;
        this.role = role;	
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        if(this.role == UserRole.WRITE) return List.of(new SimpleGrantedAuthority("ROLE_WRITE"), new SimpleGrantedAuthority("ROLE_READ"));
        else return List.of(new SimpleGrantedAuthority("ROLE_READ"));
    }

    @Override
    public String getUsername() {
        return login;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}

